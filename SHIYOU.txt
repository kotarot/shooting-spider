shooting-spider 仕様

最終更新日: 2012/07/03
更新者: 寺田
コメント: 竹田くんを描画担当にすると担当が分割しにくいから変えたよ。後今日の1限から変更してる部分もあるから注意！


○ファイル構成について

このプログラムは以下のファイルで構成されます。担当も記載。

ファイル名		担当	説明
main.c		寺田	メインファイル	
global.h	寺田	グローバル変数をまとめておくファイル
util.c		全員	汎用的な関数をまとめたファイル（m以上n以下の乱数を取得する関数や、長方形を描画する関数など）
util.h		全員	util.cのヘッダファイル
character.c	竹田	キャラクター（つまり敵キャラのスパイダー）に関するファイル
character.h	竹田	character.cのヘッダファイル
shot.c		津村	弾に関するファイル
shot.h		津村	shot.cに関するファイル
stage.c		笹生	敵の動くエリア（台というかステージ）に関するファイル
stage.h		笹生	stage.cのヘッダファイル
letter.c	寺田	スコア用の数字を描画したりする
letter.h	寺田	letter.cのヘッダファイル


○描画について

描画はmain関数から行います！
character、shot、stageの各ファイルは描画関数の宣言及び定義のみを行い呼び出しはしないでください。（詳しくは下で説明）
描画の仕方について、
描画は 「#define FPS (数字)」 で定義した Frames Per Second の逆数の時間おきにメインファイルのdisp関数を呼び出します。
disp関数からは各disp関数（後述）を呼び出します。


○グローバル変数について

グローバル変数には以下を用意します。型も記載。
global.hをインクルードして自由に使ってください。

****************
インクルードの仕方
#include "global.h"
って書いてから使いたい変数を次のように書く。
unsigned int game_time;
こう書けばそのファイルでそのグローバル変数が使える。
****************

以下用意する予定のグローバル変数
unsigned int game_time : ゲームスタートしてから 1/FPS(秒) 毎に1ずつ増加する変数。参照するのは自由だけど書き換えちゃダメよ。
unsigned int score : 現在のスコア
s_character character[NUN_OF_CHARS] : キャラクター構造体（sは構造体って意味）のリスト（配列）。要素数は後で決める。
int p_character : character配列の何番目の要素を参照しているか。（スタックポインタみたいな感じ）
s_shot shot[NUN_OF_SHOTS] : 弾構造体のリスト。要素数は後で決める。
int p_shot : shot配列の何番目の要素を参照しているか。


○必須事項

character、shot、stageの各ファイルでは以下の関数は必須です！必ず用意してください。
（initはゲーム開始時とNew Game時に、その他の関数は1/FPS(秒)毎にメインから呼び出します）
<名前>とはcharacter、shot、stageのいづれかという意味です。

init_<名前>: ゲームのスタート時に呼ぶから初期化する内容書いてください。New Gameのときにも多分呼ぶから初期化できるように。
new_<名前>: ※stageは不要。characterはこれは適当な確率で（global.hにm以上n以下の乱数返す関数用意してあるからそれ利用して）キャラクター生成。
update_<名前>: ※stageは不要。1/FPS(秒)毎に呼ぶから情報の更新をする。（移動させて衝突判定とかそのへん）
disp_<名前>: 1/FPS(秒)毎にメインからこの関数呼ぶから描画できるようにしてね。

以下補足。

new_<名前>関数について、
グローバル変数の項目で書いたcharacterとshotのリストの要素数は16くらいにする予定。なぜなら同時に16個以上のキャラや弾は存在しないだろうってことから。（細かい値は最終的には直すかもしれないけど）。だからリストは循環リストでやる！（←重要）。つまり15番目の要素の次は0番目。
だから以下のように書く。（例としてcharacterの場合）

s_character character[NUM_OF_CHARS];
void new_character() {
    character[p_character++ % NUM_OF_CHARS] = (新しいキャラの作成);
}

update_<名前>とdisp_<名前>関数について、
一方updateとdispは配列を順番にたどっていくだけでいい。
例

void disp_character() {
    int i;
    for (i = 0; i < NUM_OF_CHARS; i++) {
        if (character[i].alive) {
            描画する(character[i]);
        }
    }
}

こんな感じで。
その他の関数は自由に定義して結構です。

キャラと弾が衝突すると処理が面倒になるかもしれないからそこは追々やる。


○util.cとutil.hについて

汎用的な関数をこのファイルに用意。
追加したかったら、適当に追加してください。


あと、ファイルの文字コードはUTF-8で改行コードはLFで！なんとなく
個別作業は土日ぐらいまでにはオナシャス！！！！

